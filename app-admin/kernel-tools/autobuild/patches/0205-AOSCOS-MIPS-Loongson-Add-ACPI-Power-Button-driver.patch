From b8150de484f2ed10f46911ea085940a1ef296431 Mon Sep 17 00:00:00 2001
From: Huacai Chen <chenhc@lemote.com>
Date: Thu, 9 Nov 2017 10:31:55 +0800
Subject: [PATCH 205/301] AOSCOS: MIPS: Loongson: Add ACPI Power Button driver

[Mingcong Bai: arch/mips/loongson64/loongson-3/acpi_init.c was moved to
drivers/platform/mips/rs780e-acpi.c with commit 0cfd2440aa03 ("MIPS:
Loongson64: Make RS780E ACPI as a platform driver" and was partially
modified with commit 68557c59a550 ("MIPS: Loongson64: Implement PM suspend
for LEFI firmware"), merged accordingly.]

Signed-off-by: Huacai Chen <chenhc@lemote.com>
Signed-off-by: Mingcong Bai <jeffbai@aosc.io>

Signed-off-by: Kexy Biscuit <kexybiscuit@aosc.io>
---
 drivers/platform/mips/rs780e-acpi.c | 73 +++++++++++++++++++++++++++++
 1 file changed, 73 insertions(+)

diff --git a/drivers/platform/mips/rs780e-acpi.c b/drivers/platform/mips/rs780e-acpi.c
index 5b8f9cc32589..35d2be41a54c 100644
--- a/drivers/platform/mips/rs780e-acpi.c
+++ b/drivers/platform/mips/rs780e-acpi.c
@@ -1,10 +1,13 @@
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/io.h>
 #include <linux/init.h>
+#include <linux/pci.h>
+#include <linux/input.h>
 #include <linux/ioport.h>
 #include <linux/export.h>
 #include <linux/of.h>
 #include <linux/platform_device.h>
+#include <linux/interrupt.h>
 
 static unsigned long acpi_iobase;
 
@@ -20,6 +23,9 @@ static unsigned long acpi_iobase;
 #define PM2_INDEX       0xCD0
 #define PM2_DATA        0xCD1
 
+static int acpi_irq;
+static struct input_dev *button;
+
 static void pmio_write_index(u16 index, u8 reg, u8 value)
 {
 	outb(reg, index);
@@ -65,6 +71,68 @@ static void acpi_hw_clear_status(void)
 	outl(inl(ACPI_GPE0_BLK), ACPI_GPE0_BLK);
 }
 
+static irqreturn_t acpi_int_routine(int irq, void *dev_id)
+{
+	u16 value;
+
+	/* PMStatus: Check PwrBtnStatus */
+	value = inw(ACPI_PM_EVT_BLK);
+	if (value & (1 << 8)) {
+		outw(1 << 8, ACPI_PM_EVT_BLK);
+		pr_info("Power Button pressed...\n");
+		input_report_key(button, KEY_POWER, 1);
+		input_sync(button);
+		input_report_key(button, KEY_POWER, 0);
+		input_sync(button);
+		return IRQ_HANDLED;
+	}
+
+	return IRQ_NONE;
+}
+
+static int __init power_button_init(void)
+{
+	int ret;
+	struct pci_dev *dev;
+
+	dev = pci_get_bus_and_slot(0, 0);
+	switch (dev->vendor) {
+	case PCI_VENDOR_ID_AMD:
+	case PCI_VENDOR_ID_ATI:
+		acpi_irq = 7;
+		break;
+	default:
+		return -ENODEV;
+	}
+
+	button = input_allocate_device();
+	if (!button)
+		return -ENOMEM;
+
+	button->name = "ACPI Power Button";
+	button->phys = "acpi/button/input0";
+	button->id.bustype = BUS_HOST;
+	button->dev.parent = NULL;
+	input_set_capability(button, EV_KEY, KEY_POWER);
+
+	ret = request_irq(acpi_irq, acpi_int_routine, IRQF_SHARED, "acpi", acpi_int_routine);
+	if (ret) {
+		pr_err("ACPI Power Button Driver: Request irq %d failed!\n", acpi_irq);
+		return -EFAULT;
+	}
+
+	ret = input_register_device(button);
+	if (ret) {
+		input_free_device(button);
+		return ret;
+	}
+
+	pr_info("ACPI Power Button Driver: Init successful!\n");
+
+	return 0;
+}
+device_initcall(power_button_init);
+
 static void acpi_registers_setup(void)
 {
 	u32 value;
@@ -126,6 +194,11 @@ static void acpi_registers_setup(void)
 	value = pm2_ioread(0xf8);
 	value |= ((1 << 5) | (1 << 1));
 	pm2_iowrite(0xf8, value);
+
+	/* PMEnable: Enable PwrBtn */
+	value = inw(ACPI_PM_EVT_BLK + 2);
+	value |= 1 << 8;
+	outw(value, ACPI_PM_EVT_BLK + 2);
 }
 
 static int rs780e_acpi_probe(struct platform_device *pdev)
-- 
2.48.1

