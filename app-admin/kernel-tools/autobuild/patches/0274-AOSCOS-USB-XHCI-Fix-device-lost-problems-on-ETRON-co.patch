From aa5c9fad00ad2e5769e72ef4f3779e9eefe198f5 Mon Sep 17 00:00:00 2001
From: Huacai Chen <chenhc@lemote.com>
Date: Mon, 3 Jun 2019 10:16:02 +0800
Subject: [PATCH 274/301] AOSCOS: USB: XHCI: Fix device lost problems on ETRON
 controller

[Mingcong Bai: Resolved merge conflicts in drivers/usb/host/xhci-ring.c
and drivers/usb/host/xhci.h. Also renamed BIT_ULL index for ETRON_HOST to
49, working around the reserved bit for XHCI_RENESAS_FW_QUIRK.]

Signed-off-by: Huacai Chen <chenhc@lemote.com>
Signed-off-by: Liangliang Huang <huangll@lemote.com>
Signed-off-by: Mingcong Bai <jeffbai@aosc.io>

Signed-off-by: Kexy Biscuit <kexybiscuit@aosc.io>
---
 drivers/usb/host/xhci-hub.c  |  7 +++++++
 drivers/usb/host/xhci-mem.c  | 19 +++++++++++++++++++
 drivers/usb/host/xhci-ring.c | 20 ++++++++++++++++++--
 drivers/usb/host/xhci.c      | 13 +++++++++++++
 drivers/usb/host/xhci.h      |  1 +
 5 files changed, 58 insertions(+), 2 deletions(-)

diff --git a/drivers/usb/host/xhci-hub.c b/drivers/usb/host/xhci-hub.c
index 9693464c0520..bf9ca5db7978 100644
--- a/drivers/usb/host/xhci-hub.c
+++ b/drivers/usb/host/xhci-hub.c
@@ -361,6 +361,9 @@ static void xhci_usb3_hub_descriptor(struct usb_hcd *hcd, struct xhci_hcd *xhci,
 	}
 
 	desc->u.ss.DeviceRemovable = cpu_to_le16(port_removable);
+
+	if (xhci->quirks & XHCI_ETRON_HOST)
+		desc->bPwrOn2PwrGood = 255;
 }
 
 static void xhci_hub_descriptor(struct usb_hcd *hcd, struct xhci_hcd *xhci,
@@ -893,6 +896,10 @@ static void xhci_hub_report_usb3_link_state(struct xhci_hcd *xhci,
 		if ((xhci->quirks & XHCI_COMP_MODE_QUIRK) &&
 				(pls == USB_SS_PORT_LS_COMP_MOD))
 			pls |= USB_PORT_STAT_CONNECTION;
+
+		if ((xhci->quirks & XHCI_ETRON_HOST) &&
+				(pls == USB_SS_PORT_LS_COMP_MOD))
+			pls |= USB_PORT_STAT_CONNECTION;
 	}
 
 	/* update status field */
diff --git a/drivers/usb/host/xhci-mem.c b/drivers/usb/host/xhci-mem.c
index 92703efda1f7..d0c570d8fc12 100644
--- a/drivers/usb/host/xhci-mem.c
+++ b/drivers/usb/host/xhci-mem.c
@@ -1398,9 +1398,15 @@ int xhci_endpoint_init(struct xhci_hcd *xhci,
 	unsigned int mult;
 	unsigned int avg_trb_len;
 	unsigned int err_count = 0;
+	u8 reg8;
+	unsigned long flags;
+	struct usb_hcd *hcd;
+	struct xhci_virt_ep *virt_ep;
 
+	hcd = xhci_to_hcd(xhci);
 	ep_index = xhci_get_endpoint_index(&ep->desc);
 	ep_ctx = xhci_get_ep_ctx(xhci, virt_dev->in_ctx, ep_index);
+	virt_ep = &virt_dev->eps[ep_index];
 
 	endpoint_type = xhci_get_endpoint_type(ep);
 	if (!endpoint_type)
@@ -1453,6 +1459,19 @@ int xhci_endpoint_init(struct xhci_hcd *xhci,
 	if ((xhci->hci_version > 0x100) && HCC2_LEC(xhci->hcc_params2))
 		mult = 0;
 
+	if (xhci->quirks & XHCI_ETRON_HOST) {
+		if (udev->speed == USB_SPEED_LOW && usb_endpoint_is_int_in(&ep->desc)) {
+			spin_lock_irqsave(&xhci->lock, flags);
+			reg8 = readb(hcd->regs + 0x4300);
+			reg8 |= 0x04;
+			writeb(reg8, hcd->regs + 0x4300);
+			spin_unlock_irqrestore(&xhci->lock, flags);
+
+			max_packet = 9;
+			virt_ep->ep_state |= EP_EJ188_FIX;
+		}
+	}
+
 	/* Set up the endpoint ring */
 	virt_dev->eps[ep_index].new_ring =
 		xhci_ring_alloc(xhci, 2, ring_type, max_packet, mem_flags);
diff --git a/drivers/usb/host/xhci-ring.c b/drivers/usb/host/xhci-ring.c
index 965bffce301e..8b0d2de78a19 100644
--- a/drivers/usb/host/xhci-ring.c
+++ b/drivers/usb/host/xhci-ring.c
@@ -2557,6 +2557,7 @@ static void process_bulk_intr_td(struct xhci_hcd *xhci, struct xhci_virt_ep *ep,
 	struct xhci_slot_ctx *slot_ctx;
 	u32 trb_comp_code;
 	u32 remaining, requested, ep_trb_len;
+	union xhci_trb *cur_trb;
 
 	slot_ctx = xhci_get_slot_ctx(xhci, ep->vdev->out_ctx);
 	trb_comp_code = GET_COMP_CODE(le32_to_cpu(event->transfer_len));
@@ -2601,9 +2602,15 @@ static void process_bulk_intr_td(struct xhci_hcd *xhci, struct xhci_virt_ep *ep,
 		break;
 	}
 
-	if (ep_trb == td->end_trb)
+	if (ep_trb == td->end_trb) {
 		td->urb->actual_length = requested - remaining;
-	else
+		if ((xhci->quirks & XHCI_ETRON_HOST) && (ep->ep_state & EP_EJ188_FIX)) {
+			cur_trb = ep_ring->dequeue;
+			td->urb->actual_length =
+				TRB_LEN(le32_to_cpu(cur_trb->generic.field[2])) -
+				EVENT_TRB_LEN(le32_to_cpu(event->transfer_len));
+		}
+	} else
 		td->urb->actual_length =
 			sum_trb_lengths(td, ep_trb) +
 			ep_trb_len - remaining;
@@ -3603,7 +3610,9 @@ int xhci_queue_bulk_tx(struct xhci_hcd *xhci, gfp_t mem_flags,
 	int sent_len, ret;
 	u32 field, length_field, remainder;
 	u64 addr, send_addr;
+	struct xhci_virt_ep *ep;
 
+	ep = &xhci->devs[slot_id]->eps[ep_index];
 	ring = xhci_urb_to_transfer_ring(xhci, urb);
 	if (!ring)
 		return -EINVAL;
@@ -3705,6 +3714,13 @@ int xhci_queue_bulk_tx(struct xhci_hcd *xhci, gfp_t mem_flags,
 			TRB_TD_SIZE(remainder) |
 			TRB_INTR_TARGET(0);
 
+		if ((xhci->quirks & XHCI_ETRON_HOST) &&
+			(ep->ep_state & EP_EJ188_FIX)) {
+			length_field = TRB_LEN(9) |
+				TRB_TD_SIZE(remainder) |
+				TRB_INTR_TARGET(0);
+		}
+
 		queue_trb(xhci, ring, more_trbs_coming | need_zero_pkt,
 				lower_32_bits(send_addr),
 				upper_32_bits(send_addr),
diff --git a/drivers/usb/host/xhci.c b/drivers/usb/host/xhci.c
index 45653114ccd7..aadda111c58f 100644
--- a/drivers/usb/host/xhci.c
+++ b/drivers/usb/host/xhci.c
@@ -2973,6 +2973,8 @@ int xhci_check_bandwidth(struct usb_hcd *hcd, struct usb_device *udev)
 	struct xhci_input_control_ctx *ctrl_ctx;
 	struct xhci_slot_ctx *slot_ctx;
 	struct xhci_command *command;
+	u8 reg8;
+	unsigned long flags;
 
 	ret = xhci_check_args(hcd, udev, NULL, 0, true, __func__);
 	if (ret <= 0)
@@ -3056,6 +3058,17 @@ int xhci_check_bandwidth(struct usb_hcd *hcd, struct usb_device *udev)
 		xhci_debugfs_create_endpoint(xhci, virt_dev, i);
 	}
 command_cleanup:
+	if (xhci->quirks & XHCI_ETRON_HOST) {
+		spin_lock_irqsave(&xhci->lock, flags);
+		hcd = xhci_to_hcd(xhci);
+		reg8 = readb(hcd->regs + 0x4300);
+		if (reg8 & 0x04) {
+			reg8 &= ~0x04;
+			writeb(reg8, hcd->regs + 0x4300);
+		}
+		spin_unlock_irqrestore(&xhci->lock, flags);
+	}
+
 	kfree(command->completion);
 	kfree(command);
 
diff --git a/drivers/usb/host/xhci.h b/drivers/usb/host/xhci.h
index 8c164340a2c3..38f57ac954cc 100644
--- a/drivers/usb/host/xhci.h
+++ b/drivers/usb/host/xhci.h
@@ -672,6 +672,7 @@ struct xhci_virt_ep {
 #define EP_SOFT_CLEAR_TOGGLE	(1 << 7)
 /* usb_hub_clear_tt_buffer is in progress */
 #define EP_CLEARING_TT		(1 << 8)
+#define EP_EJ188_FIX		(1 << 9)
 	/* ----  Related to URB cancellation ---- */
 	struct list_head	cancelled_td_list;
 	struct xhci_hcd		*xhci;
-- 
2.48.1

