##### Control part variables
EXTRA_FEATURES="jfr"
BOOTSTRAP_ADOPTIUM=23+37
BOOTSTRAP_ALPINE="v3.20"
BOOTSTRAP_DEBIAN="sid"
# the current version of LoongArchLinux jre-openjdk package
# https://loongarchlinux.org/package/?repo=extra&arch=loong64&name=jdk${BOOTSTRAP_LOONGARCH64_SUF}-openjdk
BOOTSTRAP_LOONGARCH64_SUF=""
BOOTSTRAP_LOONGARCH64="20"
OPENJDK_SUFFIX="-24"
# set to /usr/lib/java to bootstrap from AOSC OS JDK
JDKBOOTDIR="/usr/lib/java-23"

##### Archtecture mapping
[ "${CROSS:-$ARCH}" = "amd64" ] && export ADOPTIUM_ARCH="x64" JDK_HAS_JIT=y
[ "${CROSS:-$ARCH}" = "armv4" ] && export ADOPTIUM_ARCH="arm" JDK_HAS_JIT=y
[ "${CROSS:-$ARCH}" = "armv6hf" ] && export ADOPTIUM_ARCH="arm" JDK_HAS_JIT=y
[ "${CROSS:-$ARCH}" = "armv7hf" ] && export ADOPTIUM_ARCH="arm" JDK_HAS_JIT=y
[ "${CROSS:-$ARCH}" = "arm64" ] && export ADOPTIUM_ARCH="aarch64" JDK_HAS_JIT=y
[ "${CROSS:-$ARCH}" = "ppc64el" ] && export ADOPTIUM_ARCH="ppc64le" JDK_HAS_JIT=y
[ "${CROSS:-$ARCH}" = "loongson3" ] && export DEBIAN_ARCH="mips64el"
[ "${CROSS:-$ARCH}" = "riscv64" ] && export DEBIAN_ARCH="riscv64" JDK_HAS_JIT=y
[ "${CROSS:-$ARCH}" = "loongarch64" ] && export LOONGARCH64_BOOT="y" JDK_HAS_JIT=y

if [[ -z "${JDK_HAS_JIT:-}" ]]; then
    config_zero="--with-jvm-variants=zero --enable-precompiled-headers"
else
    config_zero=" "
    EXTRA_FEATURES+=",shenandoahgc,zgc"
fi

if [[ "${CROSS:-$ARCH}" = "armv7hf" ]]; then
    config_bits="--host=armv7a-hardfloat-linux-gnueabi --build=armv7a-hardfloat-linux-gnueabi"
fi

unset JAVA_HOME
unset _JAVA_OPTIONS

if [[ -z "$JDKBOOTDIR" && -n "$ADOPTIUM_ARCH" ]]; then
    abinfo "Downloading Adoptium binary toolchain ..."
    wget -O bootjdk.tar.gz "https://github.com/adoptium/temurin${MAJOR_VER}-binaries/releases/download/jdk-${BOOTSTRAP_ADOPTIUM}/OpenJDK${MAJOR_VER}U-jdk_${ADOPTIUM_ARCH}_linux_hotspot_${BOOTSTRAP_ADOPTIUM/+/_}.tar.gz"

    abinfo "Preparing Adoptium binary toolchain ..."
    tar -xf bootjdk.tar.gz

    export JDKBOOTDIR="$SRCDIR/jdk-${BOOTSTRAP_ADOPTIUM}"
fi

if [[ -z "$JDKBOOTDIR" && -n "$ALPINE_ARCH" ]]; then
    mkdir bootpkgs
    pushd bootpkgs || exit
    # abinfo "Resolving Alpine musl version ..."
    # curl -sSL https://dl-cdn.alpinelinux.org/alpine/$BOOTSTRAP_ALPINE/main/$ALPINE_ARCH/APKINDEX.tar.gz |
    #     gzip -d | tar -x APKINDEX
    # bootmuslversion="$(grep -E "^P:musl$" --max-count=1 -A 30 <APKINDEX |
    #     grep --max-count=1 -F 'V:' | cut -d':' -f2)"
    # echo "Bootstrap musl version: $bootmuslversion"

    # abinfo "Downloading bootstrap musl ..."
    # wget -O musl.apk "https://dl-cdn.alpinelinux.org/alpine/$BOOTSTRAP_ALPINE/main/$ALPINE_ARCH/musl-$bootmuslversion.apk"

    abinfo "Resolving Alpine JDK version ..."
    curl -sSL https://dl-cdn.alpinelinux.org/alpine/$BOOTSTRAP_ALPINE/community/$ALPINE_ARCH/APKINDEX.tar.gz |
        gzip -d | tar -x APKINDEX
    bootversion="$(grep -E "^P:openjdk${MAJOR_VER}$" --max-count=1 -A 30 <APKINDEX |
        grep --max-count=1 -F 'V:' | cut -d':' -f2)"
    echo "Bootstrap JDK version: $bootversion"

    rm -vf APKINDEX

    abinfo "Downloading bootstrap Jmods ..."
    wget -O jmods.apk "https://dl-cdn.alpinelinux.org/alpine/$BOOTSTRAP_ALPINE/community/$ALPINE_ARCH/openjdk${MAJOR_VER}-jmods-$bootversion.apk"
    abinfo "Downloading bootstrap JDK ..."
    wget -O jdk.apk "https://dl-cdn.alpinelinux.org/alpine/$BOOTSTRAP_ALPINE/community/$ALPINE_ARCH/openjdk${MAJOR_VER}-jdk-$bootversion.apk"
    abinfo "Downloading bootstrap JRE ..."
    wget -O jre.apk "https://dl-cdn.alpinelinux.org/alpine/$BOOTSTRAP_ALPINE/community/$ALPINE_ARCH/openjdk${MAJOR_VER}-jre-$bootversion.apk"
    abinfo "Downloading bootstrap headless JRE ..."
    wget -O jre-headless.apk "https://dl-cdn.alpinelinux.org/alpine/$BOOTSTRAP_ALPINE/community/$ALPINE_ARCH/openjdk${MAJOR_VER}-jre-headless-$bootversion.apk"
    abinfo "Downloading bootstrap Jmods ..."
    wget -O jmods.apk "https://dl-cdn.alpinelinux.org/alpine/$BOOTSTRAP_ALPINE/community/$ALPINE_ARCH/openjdk${MAJOR_VER}-jmods-$bootversion.apk"
    popd || exit

    pushd / || exit
    for path in "$SRCDIR"/bootpkgs/*; do
        abinfo "Extracting bootstrap package: $(basename "$path") ..."
        tar -xf "$path"
    done
    popd || exit

    export JDKBOOTDIR="/usr/lib/jvm/java-${MAJOR_VER}-openjdk"
fi

if [[ -z "$JDKBOOTDIR" && -n "$DEBIAN_ARCH" ]]; then
    mkdir bootpkgs
    pushd bootpkgs || exit

    abinfo "Resolving Debian sid JDK version ..."
    bootversion="$(curl -sSL https://ftp.debian.org/debian/dists/$BOOTSTRAP_DEBIAN/main/binary-$DEBIAN_ARCH/Packages.xz |
        xz -d - | grep -E "^Package: openjdk-${MAJOR_VER}-jdk$" --max-count 1 -A 30 |
        grep --max-count 1 -E '^Version: ' | cut -d' ' -f2)"
    echo "Bootstrap JDK version: $bootversion"

    abinfo "Downloading bootstrap JDK ..."
    wget -O jdk.deb "https://ftp.debian.org/debian/pool/main/o/openjdk-${MAJOR_VER}/openjdk-${MAJOR_VER}-jdk_${bootversion}_$DEBIAN_ARCH.deb"
    abinfo "Downloading bootstrap JDK (headless) ..."
    wget -O jdk-headless.deb "https://ftp.debian.org/debian/pool/main/o/openjdk-${MAJOR_VER}/openjdk-${MAJOR_VER}-jdk-headless_${bootversion}_$DEBIAN_ARCH.deb"
    abinfo "Downloading bootstrap JRE ..."
    wget -O jre.deb "https://ftp.debian.org/debian/pool/main/o/openjdk-${MAJOR_VER}/openjdk-${MAJOR_VER}-jre_${bootversion}_$DEBIAN_ARCH.deb"
    abinfo "Downloading bootstrap JRE (headless) ..."
    wget -O jre-headless.deb "https://ftp.debian.org/debian/pool/main/o/openjdk-${MAJOR_VER}/openjdk-${MAJOR_VER}-jre-headless_${bootversion}_$DEBIAN_ARCH.deb"
    popd || exit

    pushd / || exit
    for path in "$SRCDIR"/bootpkgs/*; do
        abinfo "Extracting bootstrap package: $(basename "$path") ..."
        dpkg-deb --vextract "$path" /
    done
    popd || exit

    export JDKBOOTDIR="/usr/lib/jvm/java-${MAJOR_VER}-openjdk-$DEBIAN_ARCH"
fi

if [[ -z "$JDKBOOTDIR" && -n "$LOONGARCH64_BOOT" ]]; then
    abinfo "Downloading LoongArchLinux JRE binary toolchain ..."
    wget -O bootjre.tar.zst https://archapi.zhcn.cc/api/v1/extra/loong64/jre${BOOTSTRAP_LOONGARCH64_SUF}-openjdk/download/
    abinfo "Downloading LoongArchLinux headless JRE binary toolchain ..."
    wget -O bootjre-headless.tar.zst https://archapi.zhcn.cc/api/v1/extra/loong64/jre${BOOTSTRAP_LOONGARCH64_SUF}-openjdk-headless/download/
    abinfo "Downloading LoongArchLinux JDK binary toolchain ..."
    wget -O bootjdk.tar.zst https://archapi.zhcn.cc/api/v1/extra/loong64/jdk${BOOTSTRAP_LOONGARCH64_SUF}-openjdk/download/

    mkdir bootjdk
    cd bootjdk || exit
    abinfo "Extracting JRE binary toolchain ..."
    tar -xvf ../bootjre.tar.zst
    abinfo "Extracting JRE-headless binary toolchain ..."
    tar -xvf ../bootjre-headless.tar.zst
    abinfo "Extracting JDK binary toolchain ..."
    tar -xvf ../bootjdk.tar.zst

    if [[ -e etc ]]; then
        abinfo "Configuring boot JDK ..."
        while read -r path; do
            mkdir -pv /"$path"
        done < <(find etc -type d)
        while read -r path; do
            cp -vf "$path" /"$path"
        done < <(find etc -type f)
    fi

    cd .. || exit

    export JDKBOOTDIR="$SRCDIR/bootjdk/usr/lib/jvm/java-$BOOTSTRAP_LOONGARCH64-openjdk"
fi

if [[ -z "$JDKBOOTDIR" ]]; then
    abdie "Could not find a possible bootstrap JDK"
fi

export JDKBOOTDIR

abinfo "Configuring OpenJDK ${PKGVER} ..."
install -dv -m 755 "$SRCDIR"/image
sh "$SRCDIR"/configure \
    --with-boot-jdk="$JDKBOOTDIR" \
    --prefix="$SRCDIR"/image \
    --with-conf-name=aosc \
    --with-version-pre='' \
    --with-version-opt="AOSC" \
    --with-stdc++lib=dynamic \
    --disable-warnings-as-errors \
    --enable-unlimited-crypto \
    --enable-linktime-gc \
    --with-zlib=system \
    --with-libpng=system \
    --with-libjpeg=system \
    --with-giflib=system \
    ${config_zero} \
    ${config_bits} \
    --with-jvm-features="${EXTRA_FEATURES}" \
    --enable-precompiled-headers \
    --with-extra-cxxflags="${EXTRA_CPP_FLAGS}" \
    --with-extra-cflags="${EXTRA_CFLAGS}" \
    --with-extra-ldflags="${LDFLAGS}" \
    --with-vendor-bug-url="https://github.com/AOSC-Dev/aosc-os-abbs/issues" \
    --with-vendor-vm-bug-url="https://github.com/AOSC-Dev/aosc-os-abbs/issues" \
    --with-native-debug-symbols=zipped

abinfo "Building OpenJDK ..."
make product-images docs JOBS="$(nproc)"

mkdir -pv "$PKGDIR"/usr/lib/java
mkdir -pv "$PKGDIR/etc/"
install -dv -m 755 "$PKGDIR"/usr/share/doc

IMAGE_FOLDER=build/aosc/images/
abinfo "Copying JDK images ..."
cp -rv "${IMAGE_FOLDER}"/jdk/* "$PKGDIR"/usr/lib/java/
cp -rv "${IMAGE_FOLDER}"/docs "$PKGDIR"/usr/share/doc/openjdk/
mv -v "$PKGDIR"/usr/lib/java/conf "$PKGDIR"/etc/openjdk/
ln -sv /etc/openjdk"$OPENJDK_SUFFIX"/ "$PKGDIR"/usr/lib/java/conf

if [[ -e "$PKGDIR"/usr/lib/java/man ]]; then
    abinfo "Installing man pages ..."
    mv -v "$PKGDIR"/usr/lib/java/man "$PKGDIR"/usr/share/man
    ln -sv /usr/share/man "$PKGDIR"/usr/lib/java/man
    find "$PKGDIR"/usr/share/man -type l -delete
else
    abinfo "Man pages are not generated, skipping ..."
fi

find "$PKGDIR" -iname '*.diz' -exec rm {} \;
find "$PKGDIR" -iname '*.debuginfo' -exec rm {} \;

mkdir -p "$PKGDIR"/usr/src/openjdk
mv "$PKGDIR"/usr/lib/java/lib/src.zip "$PKGDIR"/usr/src/openjdk/src.zip
ln -sv /usr/src/openjdk"$OPENJDK_SUFFIX"/src.zip "$PKGDIR"/usr/lib/java/lib/src.zip

mkdir -p "$PKGDIR"/etc/ssl/certs/java
mv -v "$PKGDIR"/usr/lib/java/lib/security/cacerts "$PKGDIR"/etc/ssl/certs/java/

ln -sfv /etc/ssl/certs/java"$OPENJDK_SUFFIX"/cacerts "$PKGDIR"/usr/lib/java/lib/security/cacerts

if [[ -n "$OPENJDK_SUFFIX" ]]; then
    abinfo "Renaming for openjdk suffix ..."
    for path in "$PKGDIR"{/etc/openjdk,/usr/lib/java,/etc/ssl/certs/java,/usr/share/doc/openjdk,/usr/src/openjdk}; do
        mv -vf "$path" "$path""$OPENJDK_SUFFIX"
    done
    if [[ -e "$PKGDIR"/usr/share/man/man1 ]]; then
        mv -vf "$PKGDIR"/usr/share/man/man1 "$PKGDIR"/usr/share/man/man1openjdk"$OPENJDK_SUFFIX"
    fi
fi

abinfo "Generating conffiles ..."
pushd "$PKGDIR" || exit
while read -r path; do
    printf '/%s\n' "$path" >>"$SRCDIR"/autobuild/conffiles
done < <(find etc/openjdk"$OPENJDK_SUFFIX" -type f)
popd || exit

unset ADOPTIUM_ARCH ALPINE_ARCH DEBIAN_ARCH LOONGARCH64_BOOT JDKBOOTDIR
