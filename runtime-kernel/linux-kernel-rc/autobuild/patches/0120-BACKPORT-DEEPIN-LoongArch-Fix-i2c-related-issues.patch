From 198dd170132308bbc92b2c82b982f3e2a001b455 Mon Sep 17 00:00:00 2001
From: Binbin Zhou <zhoubinbin@loongson.cn>
Date: Fri, 14 Feb 2025 17:50:11 +0800
Subject: [PATCH 120/301] BACKPORT: DEEPIN: LoongArch: Fix i2c related issues

Signed-off-by: wanghongliang <wanghongliang@loongson.cn>
Signed-off-by: Binbin Zhou <zhoubinbin@loongson.cn>

Link: https://github.com/deepin-community/kernel/commit/aac06cff749c36f0a268be15526ac7cb00f510fd
[Kexy: Resolved minor conflicts in
 arch/loongarch/configs/loongson3_defconfig, and
 drivers/gpio/gpio-loongson-64bit.c]
Signed-off-by: Kexy Biscuit <kexybiscuit@aosc.io>
---
 arch/loongarch/configs/loongson3_defconfig |   3 +-
 drivers/gpio/Kconfig                       |   2 +-
 drivers/gpio/gpio-loongson-64bit.c         | 183 +++++++++++++++++----
 drivers/i2c/busses/i2c-ls2x.c              |  12 +-
 4 files changed, 160 insertions(+), 40 deletions(-)

diff --git a/arch/loongarch/configs/loongson3_defconfig b/arch/loongarch/configs/loongson3_defconfig
index 8961acf00547..3cb73a0fdf0d 100644
--- a/arch/loongarch/configs/loongson3_defconfig
+++ b/arch/loongarch/configs/loongson3_defconfig
@@ -812,9 +812,10 @@ CONFIG_HID_MULTITOUCH=m
 CONFIG_HID_SUNPLUS=m
 CONFIG_HID_WACOM=m
 CONFIG_USB_HIDDEV=y
+CONFIG_I2C_HID=m
 CONFIG_I2C_HID_ACPI=m
 CONFIG_I2C_HID_OF=m
-CONFIG_I2C_HID_OF_ELAN=m
+CONFIG_USB_LED_TRIG=y
 CONFIG_USB=y
 CONFIG_USB_OTG=y
 CONFIG_USB_MON=y
diff --git a/drivers/gpio/Kconfig b/drivers/gpio/Kconfig
index 5d2439f32dee..6af2763fc69b 100644
--- a/drivers/gpio/Kconfig
+++ b/drivers/gpio/Kconfig
@@ -410,7 +410,7 @@ config GPIO_LOONGSON
 
 config GPIO_LOONGSON_64BIT
 	tristate "Loongson 64 bit GPIO support"
-	depends on LOONGARCH || COMPILE_TEST
+	depends on LOONGARCH || (64BIT && COMPILE_TEST)
 	depends on OF_GPIO
 	select GPIO_GENERIC
 	help
diff --git a/drivers/gpio/gpio-loongson-64bit.c b/drivers/gpio/gpio-loongson-64bit.c
index 7f4d78fd800e..f916a5ae0290 100644
--- a/drivers/gpio/gpio-loongson-64bit.c
+++ b/drivers/gpio/gpio-loongson-64bit.c
@@ -34,6 +34,8 @@ struct loongson_gpio_chip {
 	struct fwnode_handle	*fwnode;
 	spinlock_t		lock;
 	void __iomem		*reg_base;
+	u16			*gsi_idx_map;
+	u16			mapsize;
 	const struct loongson_gpio_chip_data *chip_data;
 };
 
@@ -42,15 +44,40 @@ static inline struct loongson_gpio_chip *to_loongson_gpio_chip(struct gpio_chip
 	return container_of(chip, struct loongson_gpio_chip, chip);
 }
 
-static inline void loongson_commit_direction(struct loongson_gpio_chip *lgpio, unsigned int pin,
-					     int input)
+static inline void loongson_commit_direction_bit(struct loongson_gpio_chip *lgpio,
+						unsigned int pin, int input)
+{
+	u64 temp;
+
+	temp = readq(lgpio->reg_base + lgpio->chip_data->conf_offset);
+	if (input)
+		temp |= 1ULL << pin;
+	else
+		temp &= ~(1ULL << pin);
+	writeq(temp, lgpio->reg_base + lgpio->chip_data->conf_offset);
+}
+
+static inline void loongson_commit_direction_byte(struct loongson_gpio_chip *lgpio,
+						unsigned int pin, int input)
 {
 	u8 bval = input ? 1 : 0;
 
 	writeb(bval, lgpio->reg_base + lgpio->chip_data->conf_offset + pin);
 }
 
-static void loongson_commit_level(struct loongson_gpio_chip *lgpio, unsigned int pin, int high)
+static void loongson_commit_level_bit(struct loongson_gpio_chip *lgpio, unsigned int pin, int high)
+{
+	u64 temp;
+
+	temp = readq(lgpio->reg_base + lgpio->chip_data->out_offset);
+	if (high)
+		temp |= 1ULL << pin;
+	else
+		temp &= ~(1ULL << pin);
+	writeq(temp, lgpio->reg_base + lgpio->chip_data->out_offset);
+}
+
+static void loongson_commit_level_byte(struct loongson_gpio_chip *lgpio, unsigned int pin, int high)
 {
 	u8 bval = high ? 1 : 0;
 
@@ -63,7 +90,10 @@ static int loongson_gpio_direction_input(struct gpio_chip *chip, unsigned int pi
 	struct loongson_gpio_chip *lgpio = to_loongson_gpio_chip(chip);
 
 	spin_lock_irqsave(&lgpio->lock, flags);
-	loongson_commit_direction(lgpio, pin, 1);
+	if (lgpio->chip_data->mode == BIT_CTRL_MODE)
+		loongson_commit_direction_bit(lgpio, pin, 1);
+	else
+		loongson_commit_direction_byte(lgpio, pin, 1);
 	spin_unlock_irqrestore(&lgpio->lock, flags);
 
 	return 0;
@@ -75,8 +105,13 @@ static int loongson_gpio_direction_output(struct gpio_chip *chip, unsigned int p
 	struct loongson_gpio_chip *lgpio = to_loongson_gpio_chip(chip);
 
 	spin_lock_irqsave(&lgpio->lock, flags);
-	loongson_commit_level(lgpio, pin, value);
-	loongson_commit_direction(lgpio, pin, 0);
+	if (lgpio->chip_data->mode == BIT_CTRL_MODE) {
+		loongson_commit_level_bit(lgpio, pin, value);
+		loongson_commit_direction_bit(lgpio, pin, 0);
+	} else {
+		loongson_commit_level_byte(lgpio, pin, value);
+		loongson_commit_direction_byte(lgpio, pin, 0);
+	}
 	spin_unlock_irqrestore(&lgpio->lock, flags);
 
 	return 0;
@@ -85,11 +120,17 @@ static int loongson_gpio_direction_output(struct gpio_chip *chip, unsigned int p
 static int loongson_gpio_get(struct gpio_chip *chip, unsigned int pin)
 {
 	u8  bval;
+	u64 qval;
 	int val;
 	struct loongson_gpio_chip *lgpio = to_loongson_gpio_chip(chip);
 
-	bval = readb(lgpio->reg_base + lgpio->chip_data->in_offset + pin);
-	val = bval & 1;
+	if (lgpio->chip_data->mode == BIT_CTRL_MODE) {
+		qval = readq(lgpio->reg_base + lgpio->chip_data->in_offset);
+		val = ((qval & (1ULL << pin)) != 0);
+	} else {
+		bval = readb(lgpio->reg_base + lgpio->chip_data->in_offset + pin);
+		val = (bval & 1);
+	}
 
 	return val;
 }
@@ -97,13 +138,22 @@ static int loongson_gpio_get(struct gpio_chip *chip, unsigned int pin)
 static int loongson_gpio_get_direction(struct gpio_chip *chip, unsigned int pin)
 {
 	u8  bval;
+	u64 qval;
+	int val;
 	struct loongson_gpio_chip *lgpio = to_loongson_gpio_chip(chip);
 
-	bval = readb(lgpio->reg_base + lgpio->chip_data->conf_offset + pin);
-	if (bval & 1)
-		return GPIO_LINE_DIRECTION_IN;
+	if (lgpio->chip_data->mode == BIT_CTRL_MODE) {
+		qval = readq(lgpio->reg_base + lgpio->chip_data->conf_offset);
+		val = ((qval & (1ULL << pin)) != 0);
+	} else {
+		bval = readb(lgpio->reg_base + lgpio->chip_data->conf_offset + pin);
+		val = bval & 1;
+	}
 
-	return GPIO_LINE_DIRECTION_OUT;
+	if (val)
+		return 1;
+
+	return 0;
 }
 
 static void loongson_gpio_set(struct gpio_chip *chip, unsigned int pin, int value)
@@ -112,7 +162,10 @@ static void loongson_gpio_set(struct gpio_chip *chip, unsigned int pin, int valu
 	struct loongson_gpio_chip *lgpio = to_loongson_gpio_chip(chip);
 
 	spin_lock_irqsave(&lgpio->lock, flags);
-	loongson_commit_level(lgpio, pin, value);
+	if (lgpio->chip_data->mode == BIT_CTRL_MODE)
+		loongson_commit_level_bit(lgpio, pin, value);
+	else
+		loongson_commit_level_byte(lgpio, pin, value);
 	spin_unlock_irqrestore(&lgpio->lock, flags);
 }
 
@@ -131,38 +184,46 @@ static int loongson_gpio_to_irq(struct gpio_chip *chip, unsigned int offset)
 		writeb(1, lgpio->reg_base + lgpio->chip_data->inten_offset + offset);
 	}
 
+	if ((lgpio->gsi_idx_map != NULL) && (offset < lgpio->mapsize))
+		offset = lgpio->gsi_idx_map[offset];
+
 	return platform_get_irq(pdev, offset);
 }
 
 static int loongson_gpio_init(struct device *dev, struct loongson_gpio_chip *lgpio,
 			      void __iomem *reg_base)
 {
-	int ret;
 	u32 ngpios;
+	u32 gpio_base;
+	int rval;
 
 	lgpio->reg_base = reg_base;
-	if (lgpio->chip_data->mode == BIT_CTRL_MODE) {
-		ret = bgpio_init(&lgpio->chip, dev, 8,
-				lgpio->reg_base + lgpio->chip_data->in_offset,
-				lgpio->reg_base + lgpio->chip_data->out_offset,
-				NULL, NULL,
-				lgpio->reg_base + lgpio->chip_data->conf_offset,
-				0);
-		if (ret) {
-			dev_err(dev, "unable to init generic GPIO\n");
-			return ret;
+	lgpio->chip.direction_input = loongson_gpio_direction_input;
+	lgpio->chip.get = loongson_gpio_get;
+	lgpio->chip.get_direction = loongson_gpio_get_direction;
+	lgpio->chip.direction_output = loongson_gpio_direction_output;
+	lgpio->chip.set = loongson_gpio_set;
+	lgpio->chip.parent = dev;
+	device_property_read_u32(dev, "gpio_base", &gpio_base);
+	if (!gpio_base)
+		gpio_base = -1;
+	lgpio->chip.base = gpio_base;
+	device_property_read_u32(dev, "ngpios", &ngpios);
+	lgpio->chip.ngpio = ngpios;
+	rval = device_property_read_u16_array(dev, "gsi_idx_map", NULL, 0);
+	if (rval > 0) {
+		lgpio->gsi_idx_map =
+			kmalloc_array(rval, sizeof(*lgpio->gsi_idx_map),
+					GFP_KERNEL);
+		if (unlikely(!lgpio->gsi_idx_map)) {
+			dev_err(dev, "Alloc gsi_idx_map fail!\n");
+		} else {
+			lgpio->mapsize = rval;
+			device_property_read_u16_array(dev, "gsi_idx_map",
+					lgpio->gsi_idx_map, lgpio->mapsize);
 		}
-	} else {
-		lgpio->chip.direction_input = loongson_gpio_direction_input;
-		lgpio->chip.get = loongson_gpio_get;
-		lgpio->chip.get_direction = loongson_gpio_get_direction;
-		lgpio->chip.direction_output = loongson_gpio_direction_output;
-		lgpio->chip.set = loongson_gpio_set;
-		lgpio->chip.parent = dev;
-		device_property_read_u32(dev, "ngpios", &ngpios);
-		lgpio->chip.ngpio = ngpios;
-		spin_lock_init(&lgpio->lock);
 	}
+	spin_lock_init(&lgpio->lock);
 
 	lgpio->chip.label = lgpio->chip_data->label;
 	lgpio->chip.can_sleep = false;
@@ -224,6 +285,7 @@ static const struct loongson_gpio_chip_data loongson_gpio_ls2k2000_data0 = {
 	.conf_offset = 0x0,
 	.in_offset = 0xc,
 	.out_offset = 0x8,
+	.inten_offset = 0x14,
 };
 
 static const struct loongson_gpio_chip_data loongson_gpio_ls2k2000_data1 = {
@@ -232,6 +294,7 @@ static const struct loongson_gpio_chip_data loongson_gpio_ls2k2000_data1 = {
 	.conf_offset = 0x0,
 	.in_offset = 0x20,
 	.out_offset = 0x10,
+	.inten_offset = 0x30,
 };
 
 static const struct loongson_gpio_chip_data loongson_gpio_ls2k2000_data2 = {
@@ -248,6 +311,7 @@ static const struct loongson_gpio_chip_data loongson_gpio_ls3a5000_data = {
 	.conf_offset = 0x0,
 	.in_offset = 0xc,
 	.out_offset = 0x8,
+	.inten_offset = 0x14,
 };
 
 static const struct loongson_gpio_chip_data loongson_gpio_ls7a_data = {
@@ -256,6 +320,33 @@ static const struct loongson_gpio_chip_data loongson_gpio_ls7a_data = {
 	.conf_offset = 0x800,
 	.in_offset = 0xa00,
 	.out_offset = 0x900,
+	.inten_offset = 0xb00,
+};
+
+static const struct loongson_gpio_chip_data loongson_gpio_ls7a2000_data0 = {
+	.label = "ls7a2000_gpio",
+	.mode = BYTE_CTRL_MODE,
+	.conf_offset = 0x800,
+	.in_offset = 0xa00,
+	.out_offset = 0x900,
+	.inten_offset = 0xb00,
+};
+
+static const struct loongson_gpio_chip_data loongson_gpio_ls7a2000_data1 = {
+	.label = "ls7a2000_gpio",
+	.mode = BYTE_CTRL_MODE,
+	.conf_offset = 0x84,
+	.in_offset = 0x88,
+	.out_offset = 0x80,
+};
+
+static const struct loongson_gpio_chip_data loongson_gpio_ls3a6000_data = {
+	.label = "ls3a6000_gpio",
+	.mode = BIT_CTRL_MODE,
+	.conf_offset = 0x0,
+	.in_offset = 0xc,
+	.out_offset = 0x8,
+	.inten_offset = 0x14,
 };
 
 static const struct of_device_id loongson_gpio_of_match[] = {
@@ -291,6 +382,18 @@ static const struct of_device_id loongson_gpio_of_match[] = {
 		.compatible = "loongson,ls7a-gpio",
 		.data = &loongson_gpio_ls7a_data,
 	},
+	{
+		.compatible = "loongson,ls7a2000-gpio1",
+		.data = &loongson_gpio_ls7a2000_data0,
+	},
+	{
+		.compatible = "loongson,ls7a2000-gpio2",
+		.data = &loongson_gpio_ls7a2000_data1,
+	},
+	{
+		.compatible = "loongson,ls3a6000-gpio",
+		.data = &loongson_gpio_ls3a6000_data,
+	},
 	{}
 };
 MODULE_DEVICE_TABLE(of, loongson_gpio_of_match);
@@ -316,6 +419,18 @@ static const struct acpi_device_id loongson_gpio_acpi_match[] = {
 		.id = "LOON000C",
 		.driver_data = (kernel_ulong_t)&loongson_gpio_ls2k2000_data2,
 	},
+	{
+		.id = "LOON000D",
+		.driver_data = (kernel_ulong_t)&loongson_gpio_ls7a2000_data0,
+	},
+	{
+		.id = "LOON000E",
+		.driver_data = (kernel_ulong_t)&loongson_gpio_ls7a2000_data1,
+	},
+	{
+		.id = "LOON000F",
+		.driver_data = (kernel_ulong_t)&loongson_gpio_ls3a6000_data,
+	},
 	{}
 };
 MODULE_DEVICE_TABLE(acpi, loongson_gpio_acpi_match);
diff --git a/drivers/i2c/busses/i2c-ls2x.c b/drivers/i2c/busses/i2c-ls2x.c
index 8821cac3897b..f0d453d8b2f2 100644
--- a/drivers/i2c/busses/i2c-ls2x.c
+++ b/drivers/i2c/busses/i2c-ls2x.c
@@ -26,7 +26,8 @@
 #include <linux/units.h>
 
 /* I2C Registers */
-#define I2C_LS2X_PRER		0x0 /* Freq Division Register(16 bits) */
+#define I2C_LS2X_PRER_LO	0x0 /* Freq Division Register Lo(8 bits) */
+#define I2C_LS2X_PRER_HI	0x1 /* Freq Division Register Hi(8 bits) */
 #define I2C_LS2X_CTR		0x2 /* Control Register */
 #define I2C_LS2X_TXR		0x3 /* Transport Data Register */
 #define I2C_LS2X_RXR		0x3 /* Receive Data Register */
@@ -96,6 +97,7 @@ static void ls2x_i2c_adjust_bus_speed(struct ls2x_i2c_priv *priv)
 	struct i2c_timings *t = &priv->i2c_t;
 	struct device *dev = priv->adapter.dev.parent;
 	u32 acpi_speed = i2c_acpi_find_bus_speed(dev);
+	u16 prer_val;
 
 	i2c_parse_fw_timings(dev, t, false);
 
@@ -104,9 +106,11 @@ static void ls2x_i2c_adjust_bus_speed(struct ls2x_i2c_priv *priv)
 	else
 		t->bus_freq_hz = LS2X_I2C_FREQ_STD;
 
-	/* Calculate and set i2c frequency. */
-	writew(LS2X_I2C_PCLK_FREQ / (5 * t->bus_freq_hz) - 1,
-	       priv->base + I2C_LS2X_PRER);
+	prer_val = LS2X_I2C_PCLK_FREQ / (5 * t->bus_freq_hz) - 1;
+
+	/* set i2c frequency. */
+	writeb(prer_val & 0xFF, priv->base + I2C_LS2X_PRER_LO);
+	writeb((prer_val & 0xFF00) >> 8, priv->base + I2C_LS2X_PRER_HI);
 }
 
 static void ls2x_i2c_init(struct ls2x_i2c_priv *priv)
-- 
2.48.1

