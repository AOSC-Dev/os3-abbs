From 2f392bcc349382cfe913b2c309383228afb14c12 Mon Sep 17 00:00:00 2001
From: Mingcong Bai <jeffbai@aosc.io>
Date: Mon, 9 Dec 2024 10:35:39 +0800
Subject: [PATCH 216/301] AOSCOS: mvsas: Optimise performance and stability on
 CPU_LOONGSON64

Optimize this driver conditionally for MIPS-based Loongson 3
(CPU_LOONGSON64):

- Reduce queue depth of SAS disks for MIPS-based Loongson 3.
- Reduce granularity and timeout value of interrupt coalescing for MIPS-
  based Loongson 3.

Also include an optimisation:

- Use bidirectional DMA for SMP request/response.

This is a partial patch from the Lemote v5.4 tree, "mvsas: Optimise
performance and stability", stripping out the part about "Use cyclic
searching to alloc command slot" as SCSI command tag allocation for this
driver was extensively revised with commit 2acf97f199f9 ("scsi: mvsas: Use
sas_task_find_rq() for tagging"). Not sure if this optimization would
still be worthwhile to port over.

Also, since CPU_LOONGSON64 is also defined for LoongArch processors, add
additionally an ifdef condition for CONFIG_MIPS to ensure that quirk code
only applied to MIPS && CPU_LOONGSON64 targets.

As a side note, `sas_slave_configure()' was renamed to
`sas_device_configure()' in commit a25a9c85d17f ("scsi: libata: Switch to
using ->device_configure"), so I revised the invocations and function
namings from the original patch accordingly (`mvs_slave_configure()' =>
`mvs_device_configure()'). This commit also introduces and additional
argument for queue limits to the `sas_device_configure()' function, so
revise accordingly.

Signed-off-by: Huacai Chen <chenhc@lemote.com>
Signed-off-by: Mingcong Bai <jeffbai@aosc.io>

Signed-off-by: Kexy Biscuit <kexybiscuit@aosc.io>
---
 drivers/scsi/mvsas/mv_64xx.c |  8 ++++++++
 drivers/scsi/mvsas/mv_94xx.c |  8 ++++++++
 drivers/scsi/mvsas/mv_init.c |  5 +++++
 drivers/scsi/mvsas/mv_sas.c  | 26 ++++++++++++++++++++------
 drivers/scsi/mvsas/mv_sas.h  |  1 +
 5 files changed, 42 insertions(+), 6 deletions(-)

diff --git a/drivers/scsi/mvsas/mv_64xx.c b/drivers/scsi/mvsas/mv_64xx.c
index 1f2b61de8c63..855d8465b30f 100644
--- a/drivers/scsi/mvsas/mv_64xx.c
+++ b/drivers/scsi/mvsas/mv_64xx.c
@@ -376,10 +376,14 @@ static int mvs_64xx_init(struct mvs_info *mvi)
 	 * it will make count 0.
 	 */
 	tmp = 0;
+#if defined(CONFIG_MIPS) && defined(CONFIG_CPU_LOONGSON64)
+	mw32(MVS_INT_COAL, (ATA_MAX_QUEUE - 1) | COAL_EN);
+#else
 	if (MVS_CHIP_SLOT_SZ > 0x1ff)
 		mw32(MVS_INT_COAL, 0x1ff | COAL_EN);
 	else
 		mw32(MVS_INT_COAL, MVS_CHIP_SLOT_SZ | COAL_EN);
+#endif
 
 	tmp = 0x10000 | interrupt_coalescing;
 	mw32(MVS_INT_COAL_TMOUT, tmp);
@@ -748,10 +752,14 @@ static void mvs_64xx_tune_interrupt(struct mvs_info *mvi, u32 time)
 		mw32(MVS_INT_COAL, 0);
 		mw32(MVS_INT_COAL_TMOUT, 0x10000);
 	} else {
+#if defined(CONFIG_MIPS) && defined(CONFIG_CPU_LOONGSON64)
+		mw32(MVS_INT_COAL, (ATA_MAX_QUEUE - 1) | COAL_EN);
+#else
 		if (MVS_CHIP_SLOT_SZ > 0x1ff)
 			mw32(MVS_INT_COAL, 0x1ff|COAL_EN);
 		else
 			mw32(MVS_INT_COAL, MVS_CHIP_SLOT_SZ|COAL_EN);
+#endif
 
 		tmp = 0x10000 | time;
 		mw32(MVS_INT_COAL_TMOUT, tmp);
diff --git a/drivers/scsi/mvsas/mv_94xx.c b/drivers/scsi/mvsas/mv_94xx.c
index fc0b8eb68204..1d1042ab82c8 100644
--- a/drivers/scsi/mvsas/mv_94xx.c
+++ b/drivers/scsi/mvsas/mv_94xx.c
@@ -515,10 +515,14 @@ static int mvs_94xx_init(struct mvs_info *mvi)
 	 * it will make count 0.
 	 */
 	tmp = 0;
+#if defined(CONFIG_MIPS) && defined(CONFIG_CPU_LOONGSON64)
+	mw32(MVS_INT_COAL, (ATA_MAX_QUEUE - 1) | COAL_EN);
+#else
 	if (MVS_CHIP_SLOT_SZ > 0x1ff)
 		mw32(MVS_INT_COAL, 0x1ff | COAL_EN);
 	else
 		mw32(MVS_INT_COAL, MVS_CHIP_SLOT_SZ | COAL_EN);
+#endif
 
 	/* default interrupt coalescing time is 128us */
 	tmp = 0x10000 | interrupt_coalescing;
@@ -1027,10 +1031,14 @@ static void mvs_94xx_tune_interrupt(struct mvs_info *mvi, u32 time)
 		mw32(MVS_INT_COAL, 0);
 		mw32(MVS_INT_COAL_TMOUT, 0x10000);
 	} else {
+#if defined(CONFIG_MIPS) && defined(CONFIG_CPU_LOONGSON64)
+		mw32(MVS_INT_COAL, (ATA_MAX_QUEUE - 1) | COAL_EN);
+#else
 		if (MVS_CHIP_SLOT_SZ > 0x1ff)
 			mw32(MVS_INT_COAL, 0x1ff|COAL_EN);
 		else
 			mw32(MVS_INT_COAL, MVS_CHIP_SLOT_SZ|COAL_EN);
+#endif
 
 		tmp = 0x10000 | time;
 		mw32(MVS_INT_COAL_TMOUT, tmp);
diff --git a/drivers/scsi/mvsas/mv_init.c b/drivers/scsi/mvsas/mv_init.c
index 2c72da6b8cf0..83cf8d637949 100644
--- a/drivers/scsi/mvsas/mv_init.c
+++ b/drivers/scsi/mvsas/mv_init.c
@@ -10,7 +10,11 @@
 
 #include "mv_sas.h"
 
+#if defined(CONFIG_MIPS) && defined(CONFIG_CPU_LOONGSON64)
+int interrupt_coalescing = 0x08;
+#else
 int interrupt_coalescing = 0x80;
+#endif
 
 static struct scsi_transport_template *mvs_stt;
 static const struct mvs_chip_info mvs_chips[] = {
@@ -32,6 +36,7 @@ static const struct attribute_group *mvst_sdev_groups[];
 
 static const struct scsi_host_template mvs_sht = {
 	LIBSAS_SHT_BASE
+	.device_configure	= mvs_device_configure,
 	.scan_finished		= mvs_scan_finished,
 	.scan_start		= mvs_scan_start,
 	.can_queue		= 1,
diff --git a/drivers/scsi/mvsas/mv_sas.c b/drivers/scsi/mvsas/mv_sas.c
index 1444b1f1c4c8..2b22f30e39a6 100644
--- a/drivers/scsi/mvsas/mv_sas.c
+++ b/drivers/scsi/mvsas/mv_sas.c
@@ -265,6 +265,20 @@ static void mvs_bytes_dmaed(struct mvs_info *mvi, int i, gfp_t gfp_flags)
 	sas_notify_port_event(sas_phy, PORTE_BYTES_DMAED, gfp_flags);
 }
 
+int mvs_device_configure(struct scsi_device *sdev, struct queue_limits *lim)
+{
+	struct domain_device *dev = sdev_to_domain_dev(sdev);
+
+	sas_device_configure(sdev, lim);
+
+#if defined(CONFIG_MIPS) && defined(CONFIG_CPU_LOONGSON64)
+	if (!dev_is_sata(dev))
+		scsi_change_queue_depth(sdev, MVS_QUEUE_SIZE);
+#endif
+
+	return 0;
+}
+
 void mvs_scan_start(struct Scsi_Host *shost)
 {
 	int i, j;
@@ -319,13 +333,13 @@ static int mvs_task_prep_smp(struct mvs_info *mvi,
 	 * DMA-map SMP request, response buffers
 	 */
 	sg_req = &task->smp_task.smp_req;
-	elem = dma_map_sg(mvi->dev, sg_req, 1, DMA_TO_DEVICE);
+	elem = dma_map_sg(mvi->dev, sg_req, 1, DMA_BIDIRECTIONAL);
 	if (!elem)
 		return -ENOMEM;
 	req_len = sg_dma_len(sg_req);
 
 	sg_resp = &task->smp_task.smp_resp;
-	elem = dma_map_sg(mvi->dev, sg_resp, 1, DMA_FROM_DEVICE);
+	elem = dma_map_sg(mvi->dev, sg_resp, 1, DMA_BIDIRECTIONAL);
 	if (!elem) {
 		rc = -ENOMEM;
 		goto err_out;
@@ -399,10 +413,10 @@ static int mvs_task_prep_smp(struct mvs_info *mvi,
 
 err_out_2:
 	dma_unmap_sg(mvi->dev, &tei->task->smp_task.smp_resp, 1,
-		     DMA_FROM_DEVICE);
+		     DMA_BIDIRECTIONAL);
 err_out:
 	dma_unmap_sg(mvi->dev, &tei->task->smp_task.smp_req, 1,
-		     DMA_TO_DEVICE);
+		     DMA_BIDIRECTIONAL);
 	return rc;
 }
 
@@ -879,9 +893,9 @@ static void mvs_slot_task_free(struct mvs_info *mvi, struct sas_task *task,
 	switch (task->task_proto) {
 	case SAS_PROTOCOL_SMP:
 		dma_unmap_sg(mvi->dev, &task->smp_task.smp_resp, 1,
-			     DMA_FROM_DEVICE);
+			     DMA_BIDIRECTIONAL);
 		dma_unmap_sg(mvi->dev, &task->smp_task.smp_req, 1,
-			     DMA_TO_DEVICE);
+			     DMA_BIDIRECTIONAL);
 		break;
 
 	case SAS_PROTOCOL_SATA:
diff --git a/drivers/scsi/mvsas/mv_sas.h b/drivers/scsi/mvsas/mv_sas.h
index 19b01f7c4767..30c7d450fb9d 100644
--- a/drivers/scsi/mvsas/mv_sas.h
+++ b/drivers/scsi/mvsas/mv_sas.h
@@ -430,6 +430,7 @@ int mvs_phy_control(struct asd_sas_phy *sas_phy, enum phy_func func,
 			void *funcdata);
 void mvs_set_sas_addr(struct mvs_info *mvi, int port_id, u32 off_lo,
 		      u32 off_hi, u64 sas_addr);
+int mvs_device_configure(struct scsi_device *sdev, struct queue_limits *lim);
 void mvs_scan_start(struct Scsi_Host *shost);
 int mvs_scan_finished(struct Scsi_Host *shost, unsigned long time);
 int mvs_queue_command(struct sas_task *task, gfp_t gfp_flags);
-- 
2.48.1

