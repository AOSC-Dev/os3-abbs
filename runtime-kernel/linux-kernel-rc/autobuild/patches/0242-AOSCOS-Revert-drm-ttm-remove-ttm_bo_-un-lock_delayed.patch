From 078fff1c4032ae5a6b34a2118f4d5673b07b5570 Mon Sep 17 00:00:00 2001
From: Mingcong Bai <jeffbai@aosc.io>
Date: Tue, 10 Dec 2024 18:06:52 +0800
Subject: [PATCH 242/301] AOSCOS: Revert "drm/ttm: remove
 ttm_bo_(un)lock_delayed_workqueue"

This reverts commit cd3a8a596214e6a338a22104936c40e62bdea2b6.

This commit is needed to build "AOSCOS: drm/radeon: recover the GPU if it
fails at resume", which relies on the removed
`ttm_bo_{un,}lock_delayed_workqueue()' functions.

Partially revert this commit for the radeon and ttm modules (leaving out
amdgpu, as it was not the target of the original patch).

Fixes: "AOSCOS: drm/radeon: recover the GPU if it fails at resume"
Signed-off-by: Mingcong Bai <jeffbai@aosc.io>

Signed-off-by: Kexy Biscuit <kexybiscuit@aosc.io>
---
 drivers/gpu/drm/radeon/radeon_device.c |  5 +++++
 drivers/gpu/drm/radeon/radeon_pm.c     |  4 +++-
 drivers/gpu/drm/ttm/ttm_bo.c           | 14 ++++++++++++++
 include/drm/ttm/ttm_bo.h               | 16 ++++++++++++++++
 4 files changed, 38 insertions(+), 1 deletion(-)

diff --git a/drivers/gpu/drm/radeon/radeon_device.c b/drivers/gpu/drm/radeon/radeon_device.c
index 56be34a0e6fc..10d2ae804de2 100644
--- a/drivers/gpu/drm/radeon/radeon_device.c
+++ b/drivers/gpu/drm/radeon/radeon_device.c
@@ -1799,6 +1799,7 @@ int radeon_gpu_reset(struct radeon_device *rdev)
 	bool saved = false;
 
 	int i, r;
+	int resched;
 
 	down_write(&rdev->exclusive_lock);
 
@@ -1810,6 +1811,8 @@ int radeon_gpu_reset(struct radeon_device *rdev)
 	atomic_inc(&rdev->gpu_reset_counter);
 
 	radeon_save_bios_scratch_regs(rdev);
+	/* block TTM */
+	resched = ttm_bo_lock_delayed_workqueue(&rdev->mman.bdev);
 	radeon_suspend(rdev);
 	radeon_hpd_fini(rdev);
 
@@ -1868,6 +1871,8 @@ int radeon_gpu_reset(struct radeon_device *rdev)
 	/* reset hpd state */
 	radeon_hpd_init(rdev);
 
+	ttm_bo_unlock_delayed_workqueue(&rdev->mman.bdev, resched);
+
 	rdev->in_reset = true;
 	rdev->needs_reset = false;
 
diff --git a/drivers/gpu/drm/radeon/radeon_pm.c b/drivers/gpu/drm/radeon/radeon_pm.c
index b4fb7e70320b..54b4b9b161f7 100644
--- a/drivers/gpu/drm/radeon/radeon_pm.c
+++ b/drivers/gpu/drm/radeon/radeon_pm.c
@@ -1854,10 +1854,11 @@ static bool radeon_pm_debug_check_in_vbl(struct radeon_device *rdev, bool finish
 static void radeon_dynpm_idle_work_handler(struct work_struct *work)
 {
 	struct radeon_device *rdev;
-
+	int resched;
 	rdev = container_of(work, struct radeon_device,
 				pm.dynpm_idle_work.work);
 
+	resched = ttm_bo_lock_delayed_workqueue(&rdev->mman.bdev);
 	mutex_lock(&rdev->pm.mutex);
 	if (rdev->pm.dynpm_state == DYNPM_STATE_ACTIVE) {
 		int not_processed = 0;
@@ -1908,6 +1909,7 @@ static void radeon_dynpm_idle_work_handler(struct work_struct *work)
 				      msecs_to_jiffies(RADEON_IDLE_LOOP_MS));
 	}
 	mutex_unlock(&rdev->pm.mutex);
+	ttm_bo_unlock_delayed_workqueue(&rdev->mman.bdev, resched);
 }
 
 /*
diff --git a/drivers/gpu/drm/ttm/ttm_bo.c b/drivers/gpu/drm/ttm/ttm_bo.c
index ea5e49858857..2529f8ee0321 100644
--- a/drivers/gpu/drm/ttm/ttm_bo.c
+++ b/drivers/gpu/drm/ttm/ttm_bo.c
@@ -329,6 +329,20 @@ void ttm_bo_put(struct ttm_buffer_object *bo)
 }
 EXPORT_SYMBOL(ttm_bo_put);
 
+int ttm_bo_lock_delayed_workqueue(struct ttm_device *bdev)
+{
+	return cancel_delayed_work_sync(&bdev->wq);
+}
+EXPORT_SYMBOL(ttm_bo_lock_delayed_workqueue);
+
+void ttm_bo_unlock_delayed_workqueue(struct ttm_device *bdev, int resched)
+{
+	if (resched)
+		schedule_delayed_work(&bdev->wq,
+				      ((HZ / 100) < 1) ? 1 : HZ / 100);
+}
+EXPORT_SYMBOL(ttm_bo_unlock_delayed_workqueue);
+
 static int ttm_bo_bounce_temp_buffer(struct ttm_buffer_object *bo,
 				     struct ttm_operation_ctx *ctx,
 				     struct ttm_place *hop)
diff --git a/include/drm/ttm/ttm_bo.h b/include/drm/ttm/ttm_bo.h
index 8ea11cd8df39..3c671490511e 100644
--- a/include/drm/ttm/ttm_bo.h
+++ b/include/drm/ttm/ttm_bo.h
@@ -356,6 +356,22 @@ static inline void ttm_bo_move_null(struct ttm_buffer_object *bo,
 	ttm_bo_assign_mem(bo, new_mem);
 }
 
+/**
+ * ttm_bo_lock_delayed_workqueue
+ *
+ * Prevent the delayed workqueue from running.
+ * Returns
+ * True if the workqueue was queued at the time
+ */
+int ttm_bo_lock_delayed_workqueue(struct ttm_device *bdev);
+
+/**
+ * ttm_bo_unlock_delayed_workqueue
+ *
+ * Allows the delayed workqueue to run.
+ */
+void ttm_bo_unlock_delayed_workqueue(struct ttm_device *bdev, int resched);
+
 /**
  * ttm_bo_unreserve
  *
-- 
2.48.1

